windows的gcc和Linux的gcc虽然有很多不同，
但在命令层是相同的，这体现在，其具有各自机型的文件的编译的原则，
但，不同机器间的准则确实基本一致的，
不同的是，Linux的底层相同，
而Windows却有自己的底层解释器，调用不同的系统级别的函数api，
但这种底层的抽象，和高层的相同，却使得，软件的可移植性，得到很大改善





Linux

gcc -o hello hello.c
./hello			#执行文件

gcc -E hello.c -o hello.i		生成预处理文件

-S选项，在编译期间，生成汇编代码后，停止，-o输出汇编代码文件		.s

gcc -c hello.c
或gcc -c heello.c -o hello.o
或gcc -c hello.i -o hello.o			#生成目标文件

gcc hello.o -o hello				#目标文件和库链接

多文件编译
gcc -c main.c a.c b.c -o main
或gcc -o main main.c a.c b.c

相当于：
gcc -c main.c -o main.o
gcc -c a.c -o a.o
gcc -c b.c -o b.o
gcc main.o a.o b.o -o main







静态库和动态库


(1)进入libtest/lib目录，执行命令：

       gcc -c -I ../include hello.c

       该命令生成目标文件hello.o，注意：参数-I添加头文件搜索目录，这里因为hello.c中有#include “hello.h”，hello.h在libtest/include目录中，这里需要指定该目录通知gcc，否则出现错误提示“找不到头文件hello.h”。
	
	这一步将在libtest/lib目录中生成一个hello.o文件。

(2)在libtest/lib目录，执行命令：

       ar rc libhello.a hello.o

       该命令将hello.o添加到静态库文件libhello.a，ar命令就是用来创建、修改库的，也可以从库中提出单个模块，参数r表示在库中插入或者替换模块，c表示创建一个库，关于ar命令的详细使用规则可以参考文章http://blog.csdn.net/xuhongning/article/details/6365200。

	这一步将在libtest/lib目录中生成一个libhello.a文件。

(3)进入libtest/src目录，执行命令：

       gcc main.c -I ../include -L ../lib -lhello -o main

       该命令将编译main.c并链接静态库文件libhello.a生成可执行文件main，注意：参数-L添加库文件搜索目录，因为libhello.a在libtest/lib目录中，这里需要指定该目录通知gcc，参数-l指定链接的库文件名称，名称不用写全名libhello.a，只用写hello即可。

       这一步将在libtest/src目录中生成可执行文件main。

 

动态库过程如下：
(1)进入libtest/lib目录，执行命令：

       gcc hello.c -I ../include -fPIC -shared -o libhello.so

       这一步将在当前目录生成动态库文件libhello.so，参数-fPIC -shared固定格式，不用纠结他们什么意思。

(2)进入libtest/src目录，执行命令：

       gcc main.c -I ../include -L ../lib -lhello -o main

       此时在当前目录中已经生成了可执行文件main，执行./main时却提示错误：

       ./main: error while loading shared libraries: libhello.so: cannotopen shared object file: No such file or directory

也就是找不到动态库文件libhello.so，在网上找了答案说如果遇到这样的问题需要设置环境变量LD_LIBRARY_PATH，如下：

       export LD_LIBRARY_PATH=”../lib”

       gcc main.c -I ../include -L ../lib -lhello -o main
 
       然后再执行./main就没有错误了。

【补充】

       环境变量LD_LIBRARY_PATH指示动态连接器可以装载动态库的路径，在链接动态库文件前设置该变量为库文件所在路径，注意：用export LD_LIBRARY_PATH=”…”方式只是临时生效的，如果要永久有效可以写入~/.bashrc文件中，跟修改PATH类似，exportLD_LIBRARY_PATH=$LD_LIBRARY_PATH:”…”。

       当然如果有root权限的话，也可以修改/etc/ld.so.conf文件，将要添加的动态库搜索路径写入该文件中，然后调用/sbin/ldconfig来达到同样的目的。
