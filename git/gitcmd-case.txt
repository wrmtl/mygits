绿色 modified：		文件存在于版本库，且版本库于暂存库不同，修改后提交，（版本			库，暂存库不同）

绿色 new file：		新文件，add暂存库，未提交版本库（版本库，暂存库不同）

红色 modified：		新文件，add暂存库，未提交版本库后，又在工作区修改（版本库				，暂存库，工作区都不相同）

git status
红色表示，workplace和index的改变
绿色表示，res和index的改变



git diff filename 	只用来比较index和workplace的区别






远程库只有readme文件，本地没有readme文件，但有其他文件，
不能git push上传，不能git pull下拉，

策略：将本地\.git 文件删除，重新git init
git pull
再把原有文件git add
git push全部提交









工作区文件重命名，
会被认为原有文件被删除，有新文件未加入index区








不同命令的作用域：
Windows-cmd层
git-cmd层{	index区，master分支区	}


通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：

$ rm test.txt		#作用于工作区

这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：

现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：

$ git rm test.txt		#作用于index区
rm 'test.txt'
$ git commit -m "remove test.txt"		#提交master分支

另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：

$ git checkout -- test.txt

git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。







空文件夹并不在识别和提交范围










git push origin master 		只在含（.git）的目录下有效









bugbranch的测试：

个分支间是独立，

git stash 的作用是将当前的工作场景给保存起来，
在转回主分支master
在创建新分支，用来修补bug，结束后提交合并主分支和bug分支，
删除bug分支，
回转dev分支，git status 没有任何变化，或原有场景，
git stash pop回转 dev的工作保存点，完成接下来的工作
在与主节点进行合并，

但是此过程是双方的文件取   并集  ，两边文件的   互相补充   ，

冲突文件转换成双边共存的比较状态，修改后可提交，
（原有合并其实在这之前已经能合并的早已合并完毕，此次修改是属于合并的修正环节，即使保持原样，不做冲突文件的合并修改，依旧以此双边共存状态进行提交）
{以后文件的冲突，笔者猜测，可能也会以这种方式，进行第三方解决}





master和dev的合并时文件内容也可取并集，即一个是另一个子集，
否则，就进行冲突合并






git push 命令提交不同分支是，分支历史也就是也被提交的，添加的
但只提交master分支，则只有master历史，