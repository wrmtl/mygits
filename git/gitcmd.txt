git config --global user.email ""
git config --global user.name ""




git init
git add <path/filename>
git commit -m "注释"




git status 只能查看缓冲区内哪些文件发生了变化，若其中没有文件发生变化，就无法查看缓冲区内有哪些文件（哪些文件曾被 add 过）
git ls-files 查看缓冲区内有哪些文件




git log		查看仓库日志   commit ID    提交人和邮箱    提交备注
git reset --hard HEAD~n		还原会以前第n各版本
git reset --hard commit id	还原提交号的状态（只需要前几位即可，支持搜索）
git diff HEAD -- readme.txt	可以查看工作区和版本库里面最新版本的区别：




回退快速，指针还原，然后顺便把工作区的文件更新




git reflog	查找所有操作命令的commit id





工作区（Working Directory）

版本库（Repository）	.git隐藏文件
	stage（index）暂存区	master分支

LICENSE还从来没有被添加过，所以它的状态是Untracked。
把提交的修改git add进入缓存区，git commit提交到分支

工作区  -----git add-----缓存区------git commit------版本库





git checkout -- filename	把filename文件在工作区的修改全部撤销

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库或暂存区一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
且该撤销只撤销回其修改前，最近一次add或commit的状态，，和当前index中的状态并无一定连接关系


git reset --hard HEAD~n		还原会以前第n各版本
git reset --hard commit id	还原提交号的状态（只需要前几位即可，支持搜索）


git reset HEAD file可以把暂存区的修改撤销掉（unstage），用最新版本库更新暂存库，并不影响工作区状态


git diff HEAD -- readme.txt	可以查看工作区和版本库里面最新版本的区别：
git diff filename 	只用来比较index和workplace的区别



